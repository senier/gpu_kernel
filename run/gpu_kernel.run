#
# \brief  Showcases terminal_log server
# \author Alexander Senier
# \date   2016-09-17
#

proc use_nic { }  {return [have_include "power_on/qemu"]}
proc use_wifi { } {return [expr ![use_nic]]}

set build_components {
	core
	init
	drivers/input
	drivers/timer
	drivers/rtc
	server/fs_rom
	server/ram_fs
	server/report_rom
	server/terminal_log
	lib/vfs/jitterentropy
	server/tcp_terminal
	app/hello_gpu
}

lappend_if [use_wifi] build_components drivers/wifi
lappend_if [use_nic]  build_components drivers/nic

source ${genode_dir}/repos/base/run/platform_drv.inc
append_platform_drv_build_components

build $build_components

create_boot_directory

append config {
<config>
	<parent-provides>
		<service name="ROM"/>
		<service name="RAM"/>
		<service name="IRQ"/>
		<service name="IO_MEM"/>
		<service name="IO_PORT"/>
		<service name="PD"/>
		<service name="RM"/>
		<service name="CPU"/>
		<service name="LOG"/>
	</parent-provides>
	<default-route>
		<service name="Nitpicker"> <child name="nitpicker"/> </service>
		<service name="Timer">     <child name="timer"/> </service>
		<service name="Platform">  <child name="platform_drv"/> </service>
		<any-service> <parent/> </any-service>
	</default-route>

	<start name="timer">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Timer"/></provides>
	</start>
}

append_platform_drv_config

append_if [have_spec ps2] config {
	<start name="ps2_drv">
		<resource name="RAM" quantum="1M"/>
		<provides><service name="Input"/></provides>
		<config verbose_mouse="true"/>
	</start>
	<alias name="input_drv" child="ps2_drv"/>}

append config {

	<start name="rtc_drv">
		<resource name="RAM" quantum="1M"/>
		<provides> <service name="Rtc"/> </provides>
		<route>
			<any-service> <any-child/> <parent/></any-service>
		</route>
	</start>

	<start name="report_rom">
		<resource name="RAM" quantum="2M"/>
		<provides> <service name="Report" /> <service name="ROM" /> </provides>
		<config> <rom/> </config>
		<route>
			<any-service> <any-child/> <parent/></any-service>
		</route>
	</start>}

append_if [use_nic] config {
	<start name="nic_drv">
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="Nic"/> </provides>
	</start>
}

append_if [use_wifi] config {
	<start name="config_fs">
		<binary name="ram_fs"/>
		<resource name="RAM" quantum="4M"/>
		<provides> <service name="File_system"/> </provides>
		<config>
			<policy label="config_rom" root="/"/>
			<policy label="wifi_drv -> config" root="/" writeable="yes"/>
			<content>
				<inline name="wlan_configuration">}
append_if [use_wifi] config "
					<selected_network ssid=\"$::env(GENODE_WIFI_SSID)\" protection=\"WPA-PSK\" psk=\"$::env(GENODE_WIFI_PSK)\"/>"
append_if [use_wifi] config {
				</inline>
				<inline name="wpa_supplicant.conf"></inline>
			</content>
		</config>
		<route>
			<any-service> <any-child/> <parent/></any-service>
		</route>
	</start>

	<start name="config_rom">
		<binary name="fs_rom"/>
		<resource name="RAM" quantum="4M"/>
		<provides><service name="ROM"/></provides>
		<route>
			<service name="File_system"> <child name="config_fs" /> </service>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>
}

append_if [use_wifi] config {
	<start name="wifi_drv">
		<resource name="RAM" quantum="32M"/>
		<provides> <service name="Nic"/> </provides>
		<config ld_verbose="yes" verbose="no">
			<libc stdout="/dev/log" stderr="/dev/log" rtc="/dev/rtc">
				<vfs>
					<dir name="dev"> <log/> <rtc/>
						<jitterentropy name="random"/>
						<jitterentropy name="urandom"/>
					</dir>
					<dir name="config"> <fs label="config"/> </dir>
				</vfs>
			</libc>
		</config>
		<route>
			<service name="Rtc"> <any-child /> </service>
			<service name="File_system"> <child name="config_fs"/> </service>
			<service name="Report"> <child name="report_rom"/> </service>
			<service name="ROM"> <if-arg key="label" value="wlan_configuration" /> <child name="config_rom" /> </service>
			<any-service> <parent/> <any-child /> </any-service>
		</route>
	</start>}

append config {
	<start name="tcp_terminal">
		<resource name="RAM" quantum="2560K"/>
		<provides> <service name="Terminal"/> </provides>
		<config>
			<policy label="tcp_terminal_log" port="8888"/>
			<libc stdout="/dev/log" ip_addr="192.168.1.201" gateway="192.168.1.1" netmask="255.255.255.0">
				<vfs> <dir name="dev"> <log/> </dir> </vfs>
			</libc>
		</config>
		<route>
			<any-service> <parent/> <any-child/> </any-service>
		</route>
	</start>

	<start name="tcp_terminal_log">
		<binary name="terminal_log"/>
		<resource name="RAM" quantum="1M"/>
		<provides><service name="LOG"/></provides>
		<route>
			<service name="Terminal">  <child name="tcp_terminal"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

	<start name="intel_fb_drv">
		<binary name="hello_gpu"/>
		<resource name="RAM" quantum="1M"/>
		<route>
			<service name="LOG"> <child name="tcp_terminal_log"/> </service>
			<service name="Platform"> <child name="platform_drv"/> </service>
			<service name="Timer"> <child name="timer"/> </service>
			<any-service> <parent/> </any-service>
		</route>
	</start>

</config>
}

install_config $config

# generic modules
set boot_modules {
	core
	init
	timer
	rtc_drv
	ram_fs
	report_rom
	fs_rom
	vfs_jitterentropy.lib.so
	ld.lib.so
	libc.lib.so
	lwip.lib.so
	libc_pipe.lib.so
	terminal_log
	tcp_terminal
	hello_gpu
}

lappend_if [use_nic]  boot_modules nic_drv

lappend_if [use_wifi] boot_modules libcrypto.lib.so
lappend_if [use_wifi] boot_modules libssl.lib.so
lappend_if [use_wifi] boot_modules wpa_driver_nl80211.lib.so
lappend_if [use_wifi] boot_modules wpa_supplicant.lib.so
lappend_if [use_wifi] boot_modules wifi.lib.so
lappend_if [use_wifi] boot_modules wifi_drv
lappend_if [use_wifi] boot_modules iwlwifi-8000C-16.ucode

# platform-specific modules
lappend_if [have_spec         ps2] boot_modules ps2_drv

append_platform_drv_boot_modules

build_boot_image $boot_modules

append qemu_args " -m 512 -net user -redir tcp:5555::8888 "

append_if [have_spec x86]     qemu_args " -net nic,model=e1000 "
append_if [have_spec lan9118] qemu_args " -net nic,model=lan9118 "

run_genode_until forever
